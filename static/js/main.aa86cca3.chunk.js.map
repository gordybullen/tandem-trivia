{"version":3,"sources":["styles/TandemTrivia.module.scss","styles/TriviaQuestion.module.scss","styles/AnswerReveal.module.scss","components/AnswerReveal.jsx","util/shuffleArray.js","components/TriviaQuestion.jsx","util/triviaService.js","components/TandemTrivia.jsx","index.js"],"names":["module","exports","AnswerReveal","selected","correct","responses","timeRemaining","handleNext","timeLeft","className","styles","answerContainer","incorrect","onClick","shuffleArray","array","i","length","j","Math","floor","random","TriviaQuestion","questionObj","question","submitSelected","submitResponse","answerTime","timerOn","setMultiplier","useState","setSelected","submitted","setSubmitted","options","setOptions","time","setTime","useEffect","concat","submitDisabled","Boolean","handleSelect","e","option","target","innerText","handleSubmit","interval","setInterval","prevTime","clearInterval","questionContainer","optionSelectContainer","timerContainer","title","optionsContainer","map","idx","disabled","triviaService","n","Promise","resolve","questionBank","slice","TandemTrivia","questions","setQuestions","setResponses","score","setScore","multiplier","answered","setAnswered","start","setStart","setTimerOn","toggleTimer","getQuestions","then","questionSet","container","stats","statItem","shortUnderline","answer","correctAnswer","checkAnswer","num","gameOver","finalScore","thanks","menuContainer","underline","instructions","buttons","timerOff","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa86cca3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TandemTrivia_container__3DAAd\",\"menuContainer\":\"TandemTrivia_menuContainer__3bIvQ\",\"title\":\"TandemTrivia_title__u7C4z\",\"instructions\":\"TandemTrivia_instructions__26yWA\",\"underline\":\"TandemTrivia_underline__2GbWa\",\"shortUnderline\":\"TandemTrivia_shortUnderline__2iNsb\",\"stats\":\"TandemTrivia_stats__Rbk4J\",\"statItem\":\"TandemTrivia_statItem__RO-AH\",\"gameOver\":\"TandemTrivia_gameOver__FnDbo\",\"finalScore\":\"TandemTrivia_finalScore__1CRdd\",\"answered\":\"TandemTrivia_answered__Os1nH\",\"thanks\":\"TandemTrivia_thanks__1kznB\",\"timerOn\":\"TandemTrivia_timerOn__1G_Nj\",\"timerOff\":\"TandemTrivia_timerOff__23zVs\",\"buttons\":\"TandemTrivia_buttons__2StT5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"questionContainer\":\"TriviaQuestion_questionContainer__1-XwV\",\"optionSelectContainer\":\"TriviaQuestion_optionSelectContainer__3F68k\",\"optionsContainer\":\"TriviaQuestion_optionsContainer__MftSf\",\"option\":\"TriviaQuestion_option__xC5fW\",\"selected\":\"TriviaQuestion_selected__2pzlY\",\"title\":\"TriviaQuestion_title__Cg92W\",\"timerContainer\":\"TriviaQuestion_timerContainer__2RBAX\",\"timeRemaining\":\"TriviaQuestion_timeRemaining__2pido\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerContainer\":\"AnswerReveal_answerContainer__3Wi-A\",\"correct\":\"AnswerReveal_correct__36E9a\",\"incorrect\":\"AnswerReveal_incorrect__TBcUx\"};","import React from \"react\";\n\n// styles\nimport styles from \"../styles/AnswerReveal.module.scss\";\n\nconst AnswerReveal = ({\n  selected,\n  correct,\n  responses,\n  timeRemaining,\n  handleNext,\n}) => {\n  // style element correctly based on whether the timer ran out or not\n  const timeLeft = timeRemaining >= 0;\n\n  return (\n    <div className={styles.answerContainer}>\n      <div className={styles.correct}>Correct answer: {correct}</div>\n      <div className={timeLeft && selected === correct ? styles.correct : styles.incorrect}>\n        Your answer: {timeLeft ? selected : \"\"}\n      </div>\n      <div>\n        {timeLeft && selected === correct\n          ? \"Great job!\"\n          : \"You'll get it next time!\"}\n      </div>\n      <button onClick={handleNext}>\n        {responses < 9 ? \"Next question!\" : \"Final score\"}\n      </button>\n    </div>\n  );\n};\n\nexport default AnswerReveal;\n","// Fisher-Yates shuffle!\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n    // swap elements array[i] and array[j]\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n};\n\nexport default shuffleArray;","import React, { useState, useEffect } from \"react\";\nimport AnswerReveal from \"./AnswerReveal\";\nimport shuffleArray from \"../util/shuffleArray\";\n\n// styles\nimport styles from \"../styles/TriviaQuestion.module.scss\";\n\nconst TriviaQuestion = ({\n  questionObj: { question, incorrect, correct },\n  submitSelected,\n  submitResponse,\n  responses,\n  answerTime,\n  timerOn,\n  setMultiplier,\n}) => {\n  const [selected, setSelected] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [time, setTime] = useState(answerTime);\n\n  // combine the array of incorrect answers and the correct answer to get all\n  // the options and then shuffle after initial render so correct answer isn't\n  // always last option\n  useEffect(() => {\n    setOptions(shuffleArray(incorrect.concat(correct)));\n  }, [incorrect, correct, setOptions]);\n\n  // if no option is selected, disable the answer submit button using a boolean\n  const submitDisabled = Boolean(!selected);\n\n  const handleSelect = (e) => {\n    const option = e.target.innerText;\n\n    // ensure only one option can be selected at once\n    if (option === selected) {\n      setSelected(\"\");\n    } else {\n      setSelected(option);\n    }\n  };\n\n  const handleSubmit = () => {\n    setSubmitted(true);\n    submitSelected(selected, time);\n  };\n\n  const handleNext = () => {\n    setSelected(\"\");\n    setSubmitted(false);\n    setTime(answerTime);\n    submitResponse();\n  };\n\n  // is timerOn is true based on user input, start the timer\n  useEffect(() => {\n    if (timerOn) {\n      const interval = setInterval(() => {\n        setTime((prevTime) => prevTime - 1);\n      }, 1000);\n\n      // clear the interval once time is up or an answer is submitted\n      if (time < 0) {\n        setMultiplier(1);\n        clearInterval(interval);\n      } else if (submitted) {\n        clearInterval(interval);\n      }\n\n      return () => clearInterval(interval);\n    }\n  }, [setMultiplier, time, setTime, timerOn, submitted]);\n\n  const optionSelect = () => {\n    return (\n      <div className={styles.optionSelectContainer}>\n        {timerOn ? (\n          <div className={styles.timerContainer}>\n            <div className={styles.timeRemaining}>Timer: {time}</div>\n          </div>\n        ) : null}\n        <h2 className={styles.title}>{question}</h2>\n        <div className={styles.optionsContainer}>\n          {options.map((option, idx) => {\n            return (\n              <div\n                className={\n                  option === selected\n                    ? `${styles.option} ${styles.selected}`\n                    : styles.option\n                }\n                key={`option-${idx}`}\n                onClick={handleSelect}\n              >\n                {option}\n              </div>\n            );\n          })}\n        </div>\n        <button onClick={handleSubmit} disabled={submitDisabled}>\n          Submit answer\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles.questionContainer}>\n      {/* if no answer has been submitted, show options to select, else reveal answer */}\n      {!submitted && time >= 0 ? (\n        optionSelect()\n      ) : (\n        <AnswerReveal\n          selected={selected}\n          correct={correct}\n          responses={responses}\n          timeRemaining={time}\n          handleNext={handleNext}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TriviaQuestion;\n","import questionBank from \"../assets/Apprentice_TandemFor400_Data.json\"\nimport shuffleArray from \"./shuffleArray\";\n\nconst triviaService = (n = 10) => {\n  return (\n    // return a promise with the desired number of questions\n    // sort all questions randomly and then slice the first n questions\n    Promise.resolve(shuffleArray(questionBank).slice(0, n))\n  );\n};\n\nexport default triviaService;\n","import React, { useState, useEffect } from \"react\";\nimport TriviaQuestion from \"./TriviaQuestion\";\nimport triviaService from \"../util/triviaService\";\n\n// styles\nimport styles from \"../styles/TandemTrivia.module.scss\";\n\nconst ANSWER_TIME = 15; // change this const for more time on the timer\n\nconst TandemTrivia = () => {\n  const [questions, setQuestions] = useState([]);\n  const [responses, setResponses] = useState(0);\n  const [score, setScore] = useState(0);\n  const [multiplier, setMultiplier] = useState(1);\n  const [answered, setAnswered] = useState(0);\n  const [start, setStart] = useState(false);\n  const [timerOn, setTimerOn] = useState(true);\n\n  // responses is also the index of the next question to be answered\n  const questionObj = questions[responses];\n\n  const checkAnswer = (answer, correctAnswer, timeRemaining) => {\n    if (answer === correctAnswer) {\n      setAnswered(answered + 1);\n      setMultiplier(multiplier + 1);\n      const points = 100 - (ANSWER_TIME - timeRemaining) * 5;\n      setScore(score + points * multiplier);\n    } else {\n      setMultiplier(1); // reset Multiplier is answer was incorrect\n    }\n  };\n\n  const toggleTimer = () => {\n    setTimerOn(!timerOn);\n  };\n\n  const restartGame = () => {\n    setResponses(0);\n    setScore(0);\n    setMultiplier(1);\n    setStart(false);\n    setAnswered(0);\n    getQuestions();\n  };\n\n  const getQuestions = () => {\n    triviaService().then((questionSet) => setQuestions(questionSet));\n  };\n\n  useEffect(getQuestions, [setQuestions]);\n\n  const menu = () => {\n    return (\n      <div className={styles.menuContainer}>\n        <h1 className={styles.title}>\n          Welcome to Tandem Trivia!\n          <div className={styles.underline}></div>\n        </h1>\n        <p className={styles.instructions}>\n          Test your trivia knowledge by answering 10 questions chosen at random\n          from the question bank. <br></br>\n          <br></br> Questions will be displayed one at a time. Each question has\n          several options to choose from, but only one is correct! <br></br>\n          <br></br> Click \"Start\" to begin. Then, select your best guess and\n          click \"Submit answer\" before the timer runs out. You can turn the\n          timer off as well if you want to take it easy.\n        </p>\n        <div className={styles.buttons}>\n          <button onClick={() => setStart(true)}>Start</button>\n          <button\n            className={timerOn ? styles.timerOn : styles.timerOff}\n            onClick={toggleTimer}\n          >\n            {timerOn ? \"Turn timer off\" : \"Turn timer on\"}\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      {/* if start is false, show the menu, otherwise start the trivia */}\n      {!start ? (\n        menu()\n      ) : responses < 10 ? (\n        <>\n          <div className={styles.stats}>\n            <div className={styles.statItem}>\n              Question: {responses + 1}/{questions.length}\n              <div className={styles.shortUnderline}></div>\n            </div>\n            <div className={styles.statItem}>\n              Score: {score}\n              <div className={styles.shortUnderline}></div>\n            </div>\n            <div className={styles.statItem}>\n              Multiplier: {multiplier}X\n              <div className={styles.shortUnderline}></div>\n            </div>\n          </div>\n          <TriviaQuestion\n            questionObj={questionObj}\n            submitSelected={(answer, timeRemaining) =>\n              checkAnswer(answer, questionObj.correct, timeRemaining)\n            }\n            submitResponse={() =>\n              setResponses(responses < 10 ? responses + 1 : 10)\n            }\n            responses={responses}\n            answerTime={ANSWER_TIME}\n            timerOn={timerOn}\n            setMultiplier={(num) => setMultiplier(num)}\n          />\n        </>\n      ) : (\n        // once all questions have been responded to, display the score\n        <div className={styles.gameOver}>\n          <div className={styles.finalScore}>Your final score: {score}</div>\n          <div className={styles.answered}>\n            Questions answered correctly: {answered}/{questions.length}\n          </div>\n          <div className={styles.thanks}>Thanks for playing!</div>\n          <button onClick={restartGame}>Try again?</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TandemTrivia;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport TandemTrivia from \"./components/TandemTrivia\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TandemTrivia />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}